@section Style{
    <link href="/css/jiazhan/product_buy.css" rel="stylesheet">
    <link href="/css/jiazhan/general.css" rel="stylesheet">
    <link href="/css/jiazhan/product_address.css" rel="stylesheet" />
            @*<link href="/css/jiazhan/product_buy_left.css" rel="stylesheet">*@
    }
    <div id="appVue">
        <div class="product_buy">
            <div>

                <div class="row align-items-center">
                    <!-- 右側畫面 -->
                    <div class="col-xl-4 col-lg-5 col-12 offset-xl-2 offset-lg-1">

                        <div class="product_buy_Left">

                            <!--   測試用  -->
        @*                    <label> 會員 ID</label>
                            <input type="number" v-model="mID" />*@
                            <!--   測試用  -->

                            <h2 class="fontBold" style="margin-top: 120px;">{{productInfo.pName}}</h2>
                            <h2 class="subTitle">{{productInfo.pModel}}</h2>
                            <div class="hightAndLowPrice">
                                <span>最高出價&nbsp:<span class="hightPrice fontBold">&nbsp{{DisplayMaxBid}}&nbsp</span></span> &nbsp|&nbsp
                                <span>最低報價&nbsp:<span class="lowPrice fontBold">&nbsp{{DisplayMinQuote}}&nbsp</span></span>

                                <p :class="{'displayNone':pLength}">US {{pSize}}</p>

                            </div>
                            <img :src="productInfo.pImg" alt="">
                        </div>
                    </div>
                    <!-- 左側畫面 -->
                    <div class="col-xl-5 col-lg-6 col-12 offset-xl-1">

                        <!--  出價資訊頁面   -->
                        <div :class="['product_buy_Right', {'DisPlayNone':buyHide} ]">
                            <!--  狀態顯示  -->
                            <div class="stateGroup">
                                <div class="state">
                                    <img src="/images/jiazhan/icon/white_flame.gif">
                                    <span>高需求</span>
                                </div>
                            </div>
                            <div class="fontRed">
                                2225 人對此商品感興趣
                            </div>


                            <!--  尺碼  -->
                            <div :class="{'displayNone':pLength}">
                                <div @@click="showSelSize = !showSelSize" :class="['selSize']" style="display:flex;justify-content: space-between;">
                                    <div>尺碼&nbsp;:&nbsp;&nbsp;<span class="fontBold">US {{pSize}}</span></div>
                                    <img src="https://stockx-assets.imgix.net/svg/icons/pencil.svg?auto=compress,format">
                                </div>
                            </div>

                            <!--  隱藏顯示尺碼item  -->
                            <div :class="{ displayNone: showSelSize }">

                                <div class="selSizeHide">
                                    <p>選擇 US 尺碼</p>
                                    <hr />
                                    <div class="sizeItemContoiner row">
                                        <div class="col-12">
                                            <div class="sizeAndPrice">

                                                <div @@click="activeIndex=index" :class="['sizePriceItem', {'active':activeIndex==index}]" v-for="(item, index) in DisplaySizeAndPriceList" :key="index">
                                                    <div class="sizeItem" @@click="selectSizeItem(item.size,item.price,index,item.pID,item.sID,item.quoteID)">
                                                        <div class="item">
                                                            <div class="fontBold">US {{item.size}}</div>
                                                            <div class="fontGreen">{{item.fPrice}}</div>
                                                        </div>
                                                    </div>
                                                </div>

                                            </div>
                                        </div>
                                    </div>

                                </div>
                            </div>

                            <!--  提交出價及立即購買  -->
                            <div class="priceContent">
                                <div class="submitAndBuy">
                                    <div @@click="buyNow=true" id="submit" :class="['submit', {'bkcLightGray': !buyNow}, 'col-6', {'bkcGreen': buyNow}]">提交出價</div>
                                    <div @@click="buyNow=false;" id="buyNow" :class="['buyNow', {'bkcLightGray': buyNow}, 'col-6',{'bkcGreen': !buyNow}]">立即購買</div>
                                </div>
                                <!-- showPrice -->
                                <div :class="{'displayNone':buyNow}">
                                    <h2 class="priceInfo">TWD{{DisplayPrice}}</h2>
                                </div>
                                <!-- inputPrice-->
                                <div :class="[{'displayNone':!buyNow}, 'inputPriceGroup']">
                                    <span class="inputSpan">＄</span>
                                    <input placeholder="輸入出價" v-model="pPrice" type="number" class="inputPrice" @@blur="checkPrice">
                                </div>
                                <div class="priceState">{{DisplayPriceState}}</div>

                                <div class="calculateInfo">
                                    <div :class="['specialOffer']">
                                        <span>優惠碼</span>
                                        <span class="fontGreen addDiscount">添加折扣</span>
                                    </div>
                                    <div :class="['specialOffer']">
                                        <span>預計運費</span>
                                        <span>{{DisplayfreightFee}}</span>
                                    </div>
                                    @*                               <div :class="[{'displayNone':!buyNow}, 'specialOffer']">
                                <span>商品價格</span>
                                <span>{{DisplayPrice}}</span>
                                </div>*@
                                    <div :class="['specialOffer']">
                                        <span>商品價格</span>
                                        <span>{{DisplayTotalPrice}}</span>
                                    </div>
                                    @*<div class="specialOffer">
                                <span>最終價格將在結帳時計算</span>
                                <span></span>
                                </div>*@
                                </div>
                            </div>

                            <div class="buyInfo">
                                <div :class="[{'displayNone':!buyNow}, 'buyInfoBlock']">
                                    <div class="row align-items-center">
                                        <div class="col-6">
                                            <img src="https://stockx-assets.imgix.net/svg/icons/stopwatch.svg?auto=compress,format">
                                            <span>出價有效期</span>
                                        </div>
                                        <div class="col-6">
                                            <select value="1" class="selDay" v-model="selBidDay">
                                                <option value="1">1天</option>
                                                <option value="3">3天</option>
                                                <option value="7">7天</option>
                                                <option value="14">14天</option>
                                                <option value="30">30天</option>
                                                <option value="60">60天</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>
                                <div :class="[{'displayNone':buyNow}, 'buyInfoBlock']">
                                    <div class="row align-items-center">
                                        <div class="col-6">
                                            <img src="https://stockx-assets.imgix.net/svg/icons/stopwatch.svg?auto=compress,format">
                                            <span>請選擇付款方式</span>
                                        </div>
                                        <div class="col-6">
                                            <select value="LinePay" class="selDay" v-model="selPay">
                                                <option value="LinePay">Line Pay</option>
                                                <option value="信用卡">信用卡</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>

                                <div :class="[{'displayNone':buyNow}, 'buyInfoBlock']">
                                    <div class="row align-items-center">
                                        <div class="col-9">
                                            <img src="https://stockx-assets.imgix.net/svg/icons/home_2.svg?auto=compress,format">
                                            <span>{{DisplayAddressInfo}}</span>
                                        </div>
                                        <div class="col-3">
                                            <div class="icon">
                                                <img @@click="changeAddressDisplay" src="https://stockx-assets.imgix.net/svg/icons/pencil.svg?auto=compress,format">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="btnCancelAndNext">
                                <a>
                                    <div @@click="back" class="btnCancel">返回</div>
                                </a>
                                <div @@click="next" class="btnNext">下一步</div>
                                @*                                <div @@click="BidTest" class="btnNext">測試用</div>*@
                            </div>
                        </div>

                        <!--  填寫地址   -->
                        <div :class="['product_Address_Right', {'DisPlayNone':addressHide}]">
                            <div class="address">
                                <h1>地址</h1>
                                <div class="addressTitle">
                                    <span class="setAddress">請提供你的郵遞資訊</span>
                                    <button @@click="getMemberInfo" class="addMemberInfo">會員資料帶入</button>
                                </div>

                                <div>
                                    <h5>
                                        郵遞資訊
                                    </h5>
                                </div>
                                <div class="addressgroup">
                                    <label>姓名</label>
                                    <input v-model="mName" type="text" name="text" class="form-control" placeholder="請輸入全名">
                                </div>
                                <div class="addressgroup">
                                    <label>地址</label>
                                    <input v-model="mAddress" type="text" name="text" class="form-control" placeholder="請輸入地址">
                                </div>
                                <div class="addressgroup">
                                    <label>電話號碼</label>
                                    <input v-model="mPhone" type="tel" name="tel" class="form-control" placeholder="請輸入電話號碼">
                                </div>
                                <div class="addressConcelAndNext">
                                    <button @@click="changeAddressDisplay" type="button" class="btnCancel">
                                        取消
                                    </button>
                                    <input @@click="saveMemberInfo" type="submit" class="btnNext" value="儲存">
                                </div>
                            </div>
                        </div>

                        <!--  填寫信用卡   -->
                        <div :class="['product_Pay_Right', {'DisPlayNone':payHide}]">
                            <div class="orderTopWidth-2">
                                <div>
                                    <h1>帳單</h1>
                                    <p>請提供你的帳單資訊</p>
                                    <div>
                                        <h4>
                                            信用卡
                                        </h4>
                                    </div>
                                    <div>
                                        <input type="text" name="text" class="form-control" placeholder="信用卡卡號">
                                    </div>
                                    <div class="addressgroup-1">
                                        <div class="addressgroup-2">
                                            <input type="text" name="text" class="form-control" placeholder="到期日">
                                        </div>
                                        <div>
                                            <input type="text" name="text" class="form-control" placeholder="信用卡檢查碼">
                                        </div>
                                    </div>
                                    <div class="addressgroup-1">
                                        <h4>
                                            帳單資訊
                                        </h4>
                                    </div>
                                    <div>
                                        <label>名字</label>
                                        <input type="text" name="text" class="form-control" placeholder="請輸入名子">
                                    </div>
                                    <div class="addressgroup">
                                        <label>姓氏</label>
                                        <input type="text" name="text" class="form-control" placeholder="請輸入姓氏">
                                    </div>
                                    <div class="addressgroup">
                                        <label>地址</label>
                                        <input type="text" name="text" class="form-control" placeholder="請輸入地址">
                                    </div>
                                    <div class="addressgroup-1">
                                        <div class="addressgroup-2">
                                            <label>地區</label>
                                            <input type="text" name="text" class="form-control" placeholder="請輸入地區">
                                        </div>
                                        <div>
                                            <label>郵遞區號</label>
                                            <input type="text" name="text" class="form-control" placeholder="請輸入遞區號">
                                        </div>
                                    </div>
                                    <div class="addressgroup">
                                        <label>電話號碼</label>
                                        <input type="tel" name="tel" class="form-control" placeholder="請輸入電話號碼">
                                    </div>
                                    <div class="addressgroupBtn">
                                        <button @@click="changePayDisplay" type="button" class="btn btncolor btnCancel">
                                            取消
                                        </button>
                                        <input type="submit" class="btn btncolor inputright btnNext" value="儲存">
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @section Scripts{
    <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.2.2/axios.min.js"></script>

    <script src="/lib/wow/wow.min.js"></script>
    <script src="/lib/easing/easing.min.js"></script>
    <script src="/lib/waypoints/waypoints.min.js"></script>
    <script src="/lib/owlcarousel/owl.carousel.min.js"></script>
    <script src="/lib/counterup/counterup.min.js"></script>
    <script src="/lib/parallax/parallax.min.js"></script>
    <script src="/lib/lightbox/js/lightbox.min.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/numeral.js/2.0.6/numeral.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/uuid@8.3.1/dist/umd/uuidv4.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>

    <!-- Template Javascript -->
    <script src="/js/main.js"></script>

    <script>
        // order page
        let baseLoginPayUrl = "https://localhost:7052/api/LinePay/";
        let webApiAddress = "https://localhost:7139/api/J";
        let NgrokUrl = "https://c74c-59-125-142-166.jp.ngrok.io"
        var appVue = new Vue({
            el: "#appVue",
            data: {
                productInfo: {},
                SizeAndPriceList: [],
                //hideInput: true,
                showSelSize: true,
                mID: sessionStorage.getItem("mID"),
                sID: sessionStorage.getItem("sID"),
                pID: sessionStorage.getItem("pID"),
                pSize: sessionStorage.getItem("pSize"),
                pPrice: sessionStorage.getItem("pPrice"),
                pCateID: sessionStorage.getItem("pCateID"),
                tmpPrice: null,
                activeIndex: sessionStorage.getItem("selIndex"),
                buyNow: true,
                inputPrice: 0,
                selBidDay: 1,
                buyHide: false,
                addressHide: true,
                payHide: true,
                memberList: {},
                specialOffer: 0,
                //DisplayPriceState: "",
                maxBid: 0,
                minQuote: 0,
                selPay: null,
                mName: null,
                mPhone: null,
                mAddress: null,
                pLength: null,
                freightFee: 100,
                quoteID: sessionStorage.getItem("quoteID"),
            },
            mounted: function () {
                let _this = this;
                _this.getProductInfoDTO();

                //_this.getMemberInfo();
                _this.getMaxMinPrice();
                if (sessionStorage.getItem("bool") == "true") {
                    _this.buyNow = true;
                } else {
                    _this.buyNow = false;
                }

            },
            methods: {
                async getProductInfoDTO() {
                    try {
                        let _this = this;
                        let response = await axios.get(`${webApiAddress}/GetProductInfo/${_this.pID}`);
                        this.productInfo = response.data;
                        if (_this.productInfo.length == 1) {
                            _this.productInfo = _this.productInfo[0];
                            _this.pLength = true;
                            sessionStorage.setItem("pLength", _this.pLength);
                        } else {
                            _this.productInfo = _this.productInfo[0];
                            _this.pLength = false;
                            sessionStorage.setItem("pLength", _this.pLength);
                        }
                        _this.pCateID = _this.productInfo.pCateID;
                        _this.getSizeAndQuote();
                    } catch (error) {
                        console.log(error);
                    }
                },
                async getSizeAndQuote() {
                    try {
                        let _this = this;
                        let response = await axios.get(`${webApiAddress}/GetSizeAndQuote/${_this.pCateID}`);
                        _this.SizeAndPriceList = response.data;

                        if (_this.quoteID) {
                            let index, result;
                            _this.DisplaySizeAndPriceList.forEach((item, i) => {
                                if (item.quoteID == _this.quoteID) {
                                    index = i;
                                    result = item;
                                }
                            });
                            _this.selectSizeItem(result.size, result.price, index, result.pID, result.sID, result.quoteID);
                        } else {
                            //預設選取
                            let list = _this.SizeAndPriceList;
                            let i = _this.activeIndex;
                            _this.selectSizeItem(list[i].pSize, list[i].pPrice, i, list[i].pID, list[i].sID, list[i].quoteID);
                        }
                    } catch (error) {
                        console.log(error);
                    }
                },
                async getMemberInfo() {
                    try {
                        let _this = this;
                        let response = await axios.get(`${webApiAddress}/GetMemberInfo/${_this.mID}`);
                        _this.memberList = response.data;
                        if (_this.memberList.mName != null && _this.memberList.mPhone != null && _this.memberList.mAddress != null) {
                            _this.mName = _this.memberList.mName;
                            _this.mPhone = _this.memberList.mPhone;
                            _this.mAddress = _this.memberList.mAddress;
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: '無法帶入資料',
                                text:'由於您未在個人資料設定銀行帳戶請從下方填入銀行帳戶'
                            })
                        }


                    } catch (error) {

                        console.log(error);
                    }
                },
                async getMaxMinPrice() {
                    try {
                        let _this = this;
                        let response = await axios.get(`${webApiAddress}/GetMaxMinPrice/${_this.pID}`);
                        _this.maxBid = response.data.maxBid;
                        _this.minQuote = response.data.minQuote;
                    } catch (error) {
                        console.log(error);
                    }
                },
                selectSizeItem(pSize, pPrice, index, pID, sID, quoteID) {
                    let _this = this;
                    _this.showSelSize = true;
                    _this.pSize = pSize;
                    _this.pPrice = pPrice;
                    _this.tmpPrice = pPrice;
                    _this.pID = pID;
                    _this.sID = sID;
                    _this.quoteID = quoteID;
                    sessionStorage.setItem("quoteID", _this.quoteID);
                    sessionStorage.setItem("pSize", _this.pSize);
                    sessionStorage.setItem("pPrice", _this.pPrice);
                    sessionStorage.setItem("selIndex", index);
                    sessionStorage.setItem("pID", pID);
                },
                back: function () {
                    window.location = "/product_info"
                },
                changeAddressDisplay() {
                    this.buyHide = this.buyHide ? false : true;
                    this.addressHide = !this.buyHide;
                },
                changePayDisplay() {
                    this.buyHide = this.buyHide ? false : true;
                    this.payHide = !this.buyHide;
                },
                saveMemberInfo() {
                    let _this = this;
                    if (_this.mPhone != "" && _this.mName != "" && _this.mAddress != "") {
                        let request = {
                            mID: _this.mID,
                            mPhone: _this.mPhone,
                            mName: _this.mName,
                            mAddress: _this.mAddress
                        };
                        axios.put(`${webApiAddress}/UpdataMemberInfo/${_this.mID}`, request)
                        Swal.fire({
                            icon: 'success',
                            title: '成功!',
                            text: '會員資料儲存成功!',

                        })
                        _this.changeAddressDisplay();
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: '無法存儲!',
                            text: '寄送資訊不完整, 請重新檢查!'
                        })

                    }
                },
                Format(val) { return numeral(val).format("$0,0"); },
                linepay() {
                    window.location = "/products"
                },
                sweetAlert(val1, val2) {
                    if (val1 == 1) {
                        val1 == 'success'
                    } else {
                        val1 = 'error';
                    }
                    Swal.fire({
                        icon: val1,
                        title: val2,
                    })
                },
                checkPayment(orderInfo) {
                    let _this = this;
                    if (_this.selPay == null && orderInfo.info == "buy") {
                        Swal.fire({
                            icon: 'error',
                            title: '無法操作!',
                            text: '請選擇付款方式!',
                        })
                    } else if (_this.mAddress != "" && _this.mPhone != "" && _this.mName != "" && _this.selPay == "LinePay" && orderInfo.info == "buy") {
                        _this.requestLinePayment(_this.pPrice, orderInfo);
                    } else if (_this.mAddress != "" && _this.mPhone != "" && _this.mName != "" && _this.selPay == "信用卡" && orderInfo.info == "buy") {
                        alert("信用卡");
                    } else {
                        //alert("檢查收貨資訊, 有資料尚未填寫");
                    }
                },
                async requestLinePayment(price, orderInfo) {
                    try {
                        let _this = this;
                        payment = {
                            amount: parseInt(price),
                            currency: "TWD",
                            orderId: Date.now().toString(), //使用 Timestamp 當作 orderId
                            packages: [
                                {
                                    id: "20230129",
                                    amount: parseInt(price),
                                    name: _this.productInfo.pName,
                                    products: [
                                        {
                                            name: _this.productInfo.pName,
                                            imageUrl: _this.productInfo.pImg,
                                            quantity: 1,
                                            price: parseInt(price),
                                        }
                                    ]
                                },
                            ],
                            RedirectUrls: {
                                ConfirmUrl: `${NgrokUrl}/confirm`,
                                CancelUrl: "https://c4f0-61-63-154-173.jp.ngrok.io/api/LinePay/Cancel",
                            },
                        };
                        window.name = JSON.stringify(orderInfo);
                        // 送出交易申請至商家 server
                        $.post({
                            url: baseLoginPayUrl + "Create",
                            dataType: "json",
                            contentType: "application/json",
                            data: JSON.stringify(payment),
                            success: (res) => {
                                window.location = res.info.paymentUrl.web;
                            },
                            error: (err) => {
                                console.log(err);
                            }
                        })
                    } catch (error) {
                        console.log(error)
                    }
                },
                next() {
                    let _this = this;
                    let orderInfo = {
                        quoteID: _this.quoteID,
                        bID: _this.mID,
                        //pPrice: _this.pPrice,
                        finalPrice: _this.TotalPrice,
                        sellerPrice: _this.pPrice,
                        buyerPrice: _this.pPrice,
                        pName: _this.productInfo.pName,
                        pImg: _this.productInfo.pImg,
                        pID: _this.pID,
                        pay: _this.selPay,
                        receiver: _this.memberList.mName,
                        receivingPhone: _this.memberList.mPhone,
                        shippingAddress: _this.memberList.mAddress,
                    }
                    if (!_this.buyNow) {
                        if (_this.pPrice > 0) {
                            orderInfo.info = "buy";
                            orderInfo.sID = _this.sID;
                            _this.checkPayment(orderInfo);

                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: '無法操作',
                                text: '目前無賣家無法購買!請使用提交出價功能',
                            })

                            _this.buyNow = !_this.buyNow;

                        }
                    } else {
   
                        orderInfo.info = "bid"
                        var mBid = axios.get(`${webApiAddress}/CheckoutMemberBid/${_this.pID}/${_this.mID}`).then(function (response) {
                            var mBid = response.data;

                            if (mBid.bidID != null) {
                                Swal.fire({
                                    title: '您先前有提交過出價',
                                    text: `請問是否要將先前的 $${mBid.pPrice} 價格修改為 $${_this.pPrice} 呢?`,
                                    icon: 'warning',
                                    showCancelButton: true,
                                    confirmButtonColor: '#3085d6',
                                    cancelButtonColor: '#d33',
                                    confirmButtonText: '確認修改!'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        let request = {
                                            bidID: mBid.bidID,
                                            pPrice: _this.pPrice,
                                            finalPrice: _this.TotalPrice
                                        }
                                        try {
                                            axios.put(`${webApiAddress}/UpdataBuyerBid`, request);

                                            Swal.fire(
                                                '成功!',
                                                `您已將出價修改為${_this.pPrice}`,
                                                'success'
                                            )
                                            //_this.sweetAlert(1, '完成修改!');
                                        } catch (error) {
                                            _this.sweetAlert(0, '發生錯誤!');
                                            console.log(error)
                                        }
                                    }
                                })

                            } else {
                                if (_this.pPrice > 0) {
                                    console.log(orderInfo)
                                    axios.post(`${webApiAddress}/InsertBuyerOrder`, orderInfo);
                                    Swal.fire({
                                        icon: 'success',
                                        title: '完成出價!',
                                        text: '會員中心可查看修改此次報價。'
                                    })
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: '錯誤!',
                                        text: '請輸入正確報價。'
                                    })
                                }
                            }

                        })










                    }


                },
                checkPrice() {
                    let _this = this;
                    if (_this.pPrice >= _this.minQuote && _this.minQuote != 0) {
                        _this.pPrice = _this.minQuote;
                        _this.buyNow = false;
                    } else {
                        _this.buyNow = true;
                    }
                },
                BidTest() {
                    let _this = this;
                    let orderInfo = {
                        quoteID: _this.quoteID,
                        bID: _this.mID,
                        //pPrice: _this.pPrice,
                        finalPrice: _this.TotalPrice,
                        sellerPrice: _this.pPrice,
                        buyerPrice: _this.pPrice,
                        pName: _this.productInfo.pName,
                        pImg: _this.productInfo.pImg,
                        pID: _this.pID,
                        pay: _this.selPay,
                        receiver: _this.memberList.mName,
                        receivingPhone: _this.memberList.mPhone,
                        shippingAddress: _this.memberList.mAddress,
                    }
                    if (!_this.buyNow) {
                        orderInfo.info = "buy";
                        orderInfo.sID = _this.sID;
                    } else {
                        orderInfo.info = "bid"
                    }
                    _this.checkPayment(orderInfo);
                    try {
                        axios.post(`${webApiAddress}/InsertBuyerOrder`, _this.orderInfo);
                        //alert(_this.orderInfo)
                    } catch {
                        //alert("error")
                    }
                }

            },
            watch: {
                pID: {
                    handler: function () {
                        this.getProductInfoDTO();
                        this.getMaxMinPrice();
                    }
                },
                mID: {
                    handler: function () {
                        if (this.mID) {
                            sessionStorage.setItem("mID", this.mID)
                        }
                    }
                }
                //pPrice: {
                //handler: function (newVal, oldVal) {
                //    if (newVal >= this.minQuote) {
                //        this.pPrice = this.minQuote;
                //        this.buyNow = false;
                //        this.DisplayPriceState = "你將以最低報價購買此商品";
                //        if (this.tmpPrice != null) {
                //            this.pPrice = this.tmpPrice;
                //        }
                //        this.tmpPrice = null;
                //    } else {
                //        this.pPrice = newVal;
                //        this.DisplayPriceState = "你並非最高出價者";
                //    }
                //},
                //}
            },
            computed: {
                SetBidPriceDate: {
                    get() {
                        var VDay = new Date();
                        VDay.setDate(VDay.getDate() + Number(this.selBidDay));
                        return VDay.toLocaleString()
                    }
                },
                TotalPrice() {
                    return this.pPrice - this.specialOffer + this.freightFee;
                },
                DisplayAddressInfo: {
                    get() { return this.mAddress != null ? this.mAddress : "未提供郵寄資訊"; }
                },
                DisplayTotalPrice() {
                    return this.Format(this.TotalPrice);
                },
                DisplayPrice() {
                    return this.Format(this.pPrice);
                },
                DisplaySizeAndPriceList: {
                    get() {
                        return this.SizeAndPriceList.map(item => {
                            return {
                                sID: item.sID,
                                pID: item.pID,
                                price: item.pPrice,
                                size: item.pSize,
                                fPrice: item.pPrice != 0 ? this.Format(item.pPrice) : "無",
                                quoteID: item.quoteID
                            }
                        })
                    }
                },
                DisplayMaxBid() {
                    return this.maxBid == 0 ? " - " : this.Format(this.maxBid)
                },
                DisplayMinQuote() {
                    return this.minQuote == 0 ? " - " : this.Format(this.minQuote)
                },
                DisplayfreightFee() {
                    return this.Format(this.freightFee);
                },
                DisplayPriceState: {
                    get() {
                        return this.pPrice > this.minQuote && this.minQuote != 0 ? "輸入的出價不可高於最低報價"
                            : this.pPrice == this.minQuote && this.minQuote != 0 ? "您將以最低報價購買此商品"
                                : this.minQuote == 0 ? "目前沒有賣家提交報價" : this.DisplayPriceState = "";
                    },
                    set() {

                    }

                }



            },


        })
    </script>

    }
